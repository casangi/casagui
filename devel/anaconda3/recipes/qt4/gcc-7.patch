diff --git src/3rdparty/javascriptcore/JavaScriptCore/wtf/TypeTraits.h src/3rdparty/javascriptcore/JavaScriptCore/wtf/TypeTraits.h
index 7ba487f..790c6a0 100644
--- src/3rdparty/javascriptcore/JavaScriptCore/wtf/TypeTraits.h
+++ src/3rdparty/javascriptcore/JavaScriptCore/wtf/TypeTraits.h
@@ -170,8 +170,16 @@ namespace WTF {
 
     // GCC's libstdc++ 20070724 and later supports C++ TR1 type_traits in the std namespace.
     // VC10 (VS2010) and later support C++ TR1 type_traits in the std::tr1 namespace.
+    // VC14 (VS2015) and later support C++11 type_traits in the std namespace, but old TR1 names
+    // have been removed. See https://msdn.microsoft.com/en-us/library/vstudio/bb531344(v=vs.140).aspx
+    // for details.
+#if __cplusplus >= 201103L
+    template<typename T> struct HasTrivialConstructor : public std::is_trivially_default_constructible<T> { };
+    template<typename T> struct HasTrivialDestructor : public std::is_trivially_destructible<T> { };
+#else
     template<typename T> struct HasTrivialConstructor : public std::tr1::has_trivial_constructor<T> { };
     template<typename T> struct HasTrivialDestructor : public std::tr1::has_trivial_destructor<T> { };
+#endif
 
 #else
 
diff --git src/3rdparty/webkit/Source/JavaScriptCore/wtf/TypeTraits.h src/3rdparty/webkit/Source/JavaScriptCore/wtf/TypeTraits.h
index 44103cd..7b09980 100644
--- src/3rdparty/webkit/Source/JavaScriptCore/wtf/TypeTraits.h
+++ src/3rdparty/webkit/Source/JavaScriptCore/wtf/TypeTraits.h
@@ -183,8 +183,16 @@ namespace WTF {
 
     // GCC's libstdc++ 20070724 and later supports C++ TR1 type_traits in the std namespace.
     // VC10 (VS2010) and later support C++ TR1 type_traits in the std::tr1 namespace.
+    // VC14 (VS2015) and later support C++11 type_traits in the std namespace, but old TR1 names
+    // have been removed. See https://msdn.microsoft.com/en-us/library/vstudio/bb531344(v=vs.140).aspx
+    // for details.
+#if __cplusplus >= 201103L
+    template<typename T> struct HasTrivialConstructor : public std::is_trivially_default_constructible<T> { };
+    template<typename T> struct HasTrivialDestructor : public std::is_trivially_destructible<T> { };
+#else
     template<typename T> struct HasTrivialConstructor : public std::tr1::has_trivial_constructor<T> { };
     template<typename T> struct HasTrivialDestructor : public std::tr1::has_trivial_destructor<T> { };
+#endif
 
 #else
 
--- src/3rdparty/webkit/Source/JavaScriptCore/wtf/HashSet.h	2019-01-29 13:49:31.581461560 -0500
+++ src/3rdparty/webkit/Source/JavaScriptCore/wtf/HashSet.h	2019-01-29 13:46:35.570327146 -0500
@@ -49,7 +48,7 @@
             HashFunctions, ValueTraits, ValueTraits> HashTableType;
 
     public:
-        typedef HashTableConstIteratorAdapter<HashTableType, ValueType> iterator;
+        typedef HashTableIteratorAdapter<HashTableType, ValueType> iterator;
         typedef HashTableConstIteratorAdapter<HashTableType, ValueType> const_iterator;
 
         void swap(HashSet&);
@@ -58,10 +57,13 @@
         int capacity() const;
         bool isEmpty() const;
 
-        iterator begin() const;
-        iterator end() const;
+        iterator begin();
+        iterator end();
+        const_iterator begin() const;
+        const_iterator end() const;
 
-        iterator find(const ValueType&) const;
+        iterator find(const ValueType&);
+        const_iterator find(const ValueType&) const;
         bool contains(const ValueType&) const;
 
         // An alternate version of find() that finds the object by hashing and comparing
@@ -69,7 +71,8 @@
         // must have the following function members:
         //   static unsigned hash(const T&);
         //   static bool equal(const ValueType&, const T&);
-        template<typename T, typename HashTranslator> iterator find(const T&) const;
+        template<typename T, typename HashTranslator> iterator find(const T&);
+        template<typename T, typename HashTranslator> const_iterator find(const T&) const;
         template<typename T, typename HashTranslator> bool contains(const T&) const;
 
         // The return value is a pair of an interator to the new value's location, 
@@ -92,14 +95,6 @@
         friend void deleteAllValues<>(const HashSet&);
         friend void fastDeleteAllValues<>(const HashSet&);
 
-#if COMPILER(MSVC) && _MSC_VER >= 1700
-        // MSVC2012/MSVC2013 has trouble constructing a HashTableConstIteratorAdapter from a
-        // HashTableIterator despite the existence of a const_iterator cast method on the latter class.
-        pair<iterator, bool> iterator_const_cast(const pair<typename HashTableType::iterator, bool>& p)
-        {
-            return make_pair(iterator(HashTableType::const_iterator(p.first)), p.second);
-        }
-#endif
         HashTableType m_impl;
     };
 
@@ -142,19 +137,37 @@
     }
 
     template<typename T, typename U, typename V>
-    inline typename HashSet<T, U, V>::iterator HashSet<T, U, V>::begin() const
+    inline typename HashSet<T, U, V>::iterator HashSet<T, U, V>::begin()
+    {
+        return m_impl.begin(); 
+    }
+
+    template<typename T, typename U, typename V>
+    inline typename HashSet<T, U, V>::iterator HashSet<T, U, V>::end()
+    {
+        return m_impl.end(); 
+    }
+
+    template<typename T, typename U, typename V>
+    inline typename HashSet<T, U, V>::const_iterator HashSet<T, U, V>::begin() const
     {
         return m_impl.begin(); 
     }
 
     template<typename T, typename U, typename V>
-    inline typename HashSet<T, U, V>::iterator HashSet<T, U, V>::end() const
+    inline typename HashSet<T, U, V>::const_iterator HashSet<T, U, V>::end() const
     {
         return m_impl.end(); 
     }
 
     template<typename T, typename U, typename V>
-    inline typename HashSet<T, U, V>::iterator HashSet<T, U, V>::find(const ValueType& value) const
+    inline typename HashSet<T, U, V>::iterator HashSet<T, U, V>::find(const ValueType& value)
+    {
+        return m_impl.find(value); 
+    }
+
+    template<typename T, typename U, typename V>
+    inline typename HashSet<T, U, V>::const_iterator HashSet<T, U, V>::find(const ValueType& value) const
     {
         return m_impl.find(value); 
     }
@@ -168,6 +181,15 @@
     template<typename Value, typename HashFunctions, typename Traits>
     template<typename T, typename HashTranslator>
     typename HashSet<Value, HashFunctions, Traits>::iterator
+    inline HashSet<Value, HashFunctions, Traits>::find(const T& value)
+    {
+        typedef HashSetTranslatorAdapter<ValueType, ValueTraits, T, HashTranslator> Adapter;
+        return m_impl.template find<T, Adapter>(value);
+    }
+
+    template<typename Value, typename HashFunctions, typename Traits>
+    template<typename T, typename HashTranslator>
+    typename HashSet<Value, HashFunctions, Traits>::const_iterator
     inline HashSet<Value, HashFunctions, Traits>::find(const T& value) const
     {
         typedef HashSetTranslatorAdapter<ValueType, ValueTraits, T, HashTranslator> Adapter;
@@ -183,26 +205,24 @@
     }
 
     template<typename T, typename U, typename V>
-    inline pair<typename HashSet<T, U, V>::iterator, bool> HashSet<T, U, V>::add(const ValueType& value)
+    pair<typename HashSet<T, U, V>::iterator, bool> HashSet<T, U, V>::add(const ValueType& value)
     {
-#if COMPILER(MSVC) && _MSC_VER >= 1700
-        return iterator_const_cast(m_impl.add(value));
-#else
-        return m_impl.add(value);
-#endif
+        pair<typename HashTable<T, T, IdentityExtractor<T>, U, V, V>::iterator, bool> p = m_impl.add(value);
+        typename HashSet<T, U, V>::iterator temp = p.first;
+        pair<typename HashSet<T, U, V>::iterator, bool> p2 = pair<typename HashSet<T, U, V>::iterator, bool>(temp, p.second);
+ //       p2.first = p.first;
+ //       p2.second = p.second;
+        return p2;
     }
 
     template<typename Value, typename HashFunctions, typename Traits>
     template<typename T, typename HashTranslator>
-    inline pair<typename HashSet<Value, HashFunctions, Traits>::iterator, bool>
+    pair<typename HashSet<Value, HashFunctions, Traits>::iterator, bool>
     HashSet<Value, HashFunctions, Traits>::add(const T& value)
     {
         typedef HashSetTranslatorAdapter<ValueType, ValueTraits, T, HashTranslator> Adapter;
-#if COMPILER(MSVC) && _MSC_VER >= 1700
-        return iterator_const_cast(m_impl.template addPassingHashCode<T, T, Adapter>(value, value));
-#else
-        return m_impl.template addPassingHashCode<T, T, Adapter>(value, value);
-#endif
+        pair<typename HashTableType::iterator, bool> p = m_impl.template addPassingHashCode<T, T, Adapter>(value, value);
+	return pair<iterator, bool>(p.first, p.second);
     }
 
     template<typename T, typename U, typename V>
@@ -210,7 +230,7 @@
     {
         if (it.m_impl == m_impl.end())
             return;
-        m_impl.internalCheckTableConsistency();
+        m_impl.checkTableConsistency();
         m_impl.removeWithoutEntryConsistencyCheck(it.m_impl);
     }
 
--- src/3rdparty/webkit/Source/JavaScriptCore/heap/MarkedSpace.cpp	2019-01-29 17:16:06.361775282 -0500
+++ src/3rdparty/webkit/Source/JavaScriptCore/heap/MarkedSpace.cpp	2019-01-29 17:16:18.948828062 -0500
@@ -124,8 +124,8 @@
 size_t MarkedSpace::objectCount() const
 {
     size_t result = 0;
-    BlockIterator end = m_blocks.end();
-    for (BlockIterator it = m_blocks.begin(); it != end; ++it)
+    auto end = m_blocks.end();
+    for (auto it = m_blocks.begin(); it != end; ++it)
         result += (*it)->markCount();
     return result;
 }
@@ -133,8 +133,8 @@
 size_t MarkedSpace::size() const
 {
     size_t result = 0;
-    BlockIterator end = m_blocks.end();
-    for (BlockIterator it = m_blocks.begin(); it != end; ++it)
+    auto end = m_blocks.end();
+    for (auto it = m_blocks.begin(); it != end; ++it)
         result += (*it)->size();
     return result;
 }
@@ -142,8 +142,8 @@
 size_t MarkedSpace::capacity() const
 {
     size_t result = 0;
-    BlockIterator end = m_blocks.end();
-    for (BlockIterator it = m_blocks.begin(); it != end; ++it)
+    auto end = m_blocks.end();
+    for (auto it = m_blocks.begin(); it != end; ++it)
         result += (*it)->capacity();
     return result;
 }
--- src/3rdparty/webkit/Source/JavaScriptCore/parser/JSParser.cpp	2019-01-29 17:18:18.083260185 -0500
+++ src/3rdparty/webkit/Source/JavaScriptCore/parser/JSParser.cpp	2019-01-29 17:18:36.674308704 -0500
@@ -453,8 +453,8 @@
         
         void copyCapturedVariablesToVector(const IdentifierSet& capturedVariables, Vector<RefPtr<StringImpl> >& vector)
         {
-            IdentifierSet::iterator end = capturedVariables.end();
-            for (IdentifierSet::iterator it = capturedVariables.begin(); it != end; ++it) {
+            auto end = capturedVariables.end();
+            for (auto it = capturedVariables.begin(); it != end; ++it) {
                 if (m_declaredVariables.contains(*it))
                     continue;
                 vector.append(*it);
--- src/3rdparty/webkit/Source/WebCore/dom/Element.cpp	2019-01-29 17:27:32.252110988 -0500
+++ src/3rdparty/webkit/Source/WebCore/dom/Element.cpp	2019-01-29 17:27:38.621150454 -0500
@@ -1080,7 +1080,7 @@
 {
     // Ref currentStyle in case it would otherwise be deleted when setRenderStyle() is called.
     RefPtr<RenderStyle> currentStyle(renderStyle());
-    bool hasParentStyle = parentNodeForRenderingAndStyle() ? parentNodeForRenderingAndStyle()->renderStyle() : false;
+    bool hasParentStyle = parentNodeForRenderingAndStyle() ? (parentNodeForRenderingAndStyle()->renderStyle() != NULL) : false;
     bool hasDirectAdjacentRules = currentStyle && currentStyle->childrenAffectedByDirectAdjacentRules();
     bool hasIndirectAdjacentRules = currentStyle && currentStyle->childrenAffectedByForwardPositionalRules();
 
--- src/plugins/accessible/widgets/itemviews.cpp	2019-01-29 19:40:02.818916821 -0500
+++ src/plugins/accessible/widgets/itemviews.cpp	2019-01-29 19:41:55.322654616 -0500
@@ -393,7 +393,7 @@
     QModelIndex index = view()->model()->index(0, column, view()->rootIndex());
     if (!index.isValid() || view()->selectionMode() & QAbstractItemView::NoSelection)
         return false;
-    view()->selectionModel()->select(index, QItemSelectionModel::Columns & QItemSelectionModel::Deselect);
+    view()->selectionModel()->select(index, (QItemSelectionModel::SelectionFlags) QItemSelectionModel::Columns & QItemSelectionModel::Deselect);
     return true;
 }
 

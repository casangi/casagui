import json
from bokeh.models import ColumnDataSource, Button, CustomJS
from bokeh.plotting import figure, show
from bokeh.layouts import column

def main( ):
    global d3_contour_coords_json,ds,b,p,mp
    setup( )
    print( len(d3_contour_coords_json) )
    p = figure( )
    b = Button( label="change" )
    ds = ColumnDataSource( data={ "xs": [ [[[1, 1, 2, 2]],[[410, 410, 420, 420]]] ],
                                  "ys": [ [[[3, 4, 4, 3]],[[430, 440, 440, 430]]] ] } )
    mp = p.multi_polygons( xs="xs", ys="ys", fill_color=None, line_color='blue', source=ds )
    b.js_on_click( CustomJS( args=dict( alternate_data=d3_contour_coords_json, source=ds ),
                             code='''if ( source._alternate_data == null ) { /**** undefined == null ****/
                                         const raw = JSON.parse(alternate_data)
                                         console.log( 'raw', raw )
                                         const x_y_separated = raw.map( x => x.map( poly => poly.reduce( (acc,pt) => { acc[0].push(pt[0]); acc[1].push(pt[1]); return acc }, [[],[]] ) ).reduce( (acc,vs) => {acc[0].push(vs[0]); acc[1].push(vs[1]); return acc}, [[],[]] ) ).reduce( (acc,poly) => { acc[0].push(poly[0]); acc[1].push(poly[1]); return acc } )
                                         console.log( 'separated', x_y_separated )
                                         console.log( '<A>----------------------------------------------------------------------------------------------------' )
                                         let count = 0
                                         for (const poly of raw) {
                                             console.log( count, poly )
                                             console.log( count, poly.map( x => x.reduce( (acc,pt) => { acc[0].push(pt[0]); acc[1].push(pt[1]); return acc }, [[],[]] ) ) )
                                             count += 1
                                         }
                                         console.log( '<B>----------------------------------------------------------------------------------------------------' )
                                         console.log( raw.map( poly => poly.map( x => x.reduce( (acc,pt) => { acc[0].push(pt[0]); acc[1].push(pt[1]); return acc }, [[],[]] ) ) ) )
                                         console.log( '<C>----------------------------------------------------------------------------------------------------' )
                                         console.log( raw.map( poly => poly.map( x => x.reduce( (acc,pt) => { acc[0].push(pt[0]); acc[1].push(pt[1]); return acc }, [[],[]] ) ) ).map( poly=> { poly.reduce( (accx,pts) => { accx[0].push(pts[0]); accx[1].push(pts[1]); console.log( ">>>", pts ); return accx }, [[],[]] ) } ) )
                                         console.log( '<D>----------------------------------------------------------------------------------------------------' )
                                         count = 0
                                         for (const poly of raw.map( poly => poly.map( x => x.reduce( (acc,pt) => { acc[0].push(pt[0]); acc[1].push(pt[1]); return acc }, [[],[]] ) ) ) ) {
                                             console.log( count, poly )
                                         }
                                         console.log( '<E>----------------------------------------------------------------------------------------------------' )
                                         console.log( raw.map( poly => poly.map( x => x.reduce( (acc,pt) => { acc[0].push(pt[0]); acc[1].push(pt[1]); return acc }, [[],[]] ) ) ).
                                                      reduce( (acc,poly) => { acc[0].push( [ poly[0][0] ] ); acc[1].push( [ poly[0][1] ] ); return acc }, [[],[]] ) )
                                         console.log( '<F>----------------------------------------------------------------------------------------------------' )
                                         const reformatted = raw.map( poly => poly.map( x => x.reduce( (acc,pt) => { acc[0].push(pt[0]); acc[1].push(pt[1]); return acc }, [[],[]] ) ) ).
                                                                reduce( (acc,poly) => { acc[0].push( [ poly[0][0] ] ); acc[1].push( [ poly[0][1] ] ); return acc }, [[],[]] )
                                         let bokeh_polygons = { xs: [ reformatted[0] ], ys: [ reformatted[1] ] }
                                         console.log( 'polygons from python', source.data )
                                         console.log( 'reformatted polygons from d3-contours', bokeh_polygons )
                                         alternate_data = bokeh_polygons
                                         console.log( 'storing alternate data in datasource._alternate_data ' )
                                         source._alternate_data = bokeh_polygons
                                         console.log( '<G>----------------------------------------------------------------------------------------------------' )
                                     }
                                     console.log('switching polygons')
                                     const old_data = source.data
                                     source.data = source._alternate_data
                                     source._alternate_data = old_data
                                     console.log( 'updataed data', source.data )
                                     console.log( 'alternate data', source._alternate_data )
                                     ''' ) )
    show(column(p,b))
    print( 'click on change and then check developer console in browser' )
    

def setup( ):
    global d3_contour_coords_json
    d3_contour_coords_json = '''[[[[341.5,246.5],[341.5,245.5],[341.5,244.5],[342.5,243.5],[342.5,243.5],[342.5,242.5],[342.5,241.5],[343.5,240.5],[343.5,240.5],[343.5,239.5],[343.5,238.5],[344.5,237.5],[344.5,237.5],[344.5,236.5],[345.5,235.5],[345.5,235.5],[345.5,234.5],[345.5,233.5],[346.5,232.5],[346.5,232.5],[346.5,231.5],[346.5,230.5],[347.5,229.5],[347.5,229.5],[347.5,228.5],[347.5,227.5],[348.5,226.5],[348.5,226.5],[348.5,225.5],[349.5,224.5],[349.5,224.5],[349.5,223.5],[349.5,222.5],[350.5,221.5],[350.5,221.5],[350.5,220.5],[350.5,219.5],[351.5,218.5],[351.5,218.5],[351.5,217.5],[352.5,216.5],[352.5,216.5],[352.5,215.5],[352.5,214.5],[353.5,213.5],[353.5,213.5],[353.5,212.5],[353.5,211.5],[354.5,210.5],[354.5,210.5],[354.5,210.5],[353.5,210.5],[352.5,209.5],[352.5,209.5],[351.5,209.5],[350.5,209.5],[349.5,208.5],[349.5,208.5],[348.5,208.5],[347.5,208.5],[346.5,208.5],[345.5,208.5],[344.5,208.5],[343.5,208.5],[342.5,208.5],[341.5,208.5],[340.5,208.5],[339.5,208.5],[338.5,208.5],[337.5,208.5],[336.5,208.5],[335.5,208.5],[334.5,208.5],[333.5,208.5],[333.5,208.5],[332.5,209.5],[331.5,209.5],[330.5,209.5],[329.5,209.5],[328.5,209.5],[328.5,209.5],[327.5,210.5],[326.5,210.5],[325.5,210.5],[325.5,210.5],[324.5,211.5],[323.5,211.5],[322.5,211.5],[322.5,211.5],[321.5,212.5],[320.5,212.5],[320.5,212.5],[319.5,213.5],[319.5,213.5],[318.5,214.5],[317.5,214.5],[317.5,214.5],[316.5,215.5],[316.5,215.5],[315.5,216.5],[315.5,216.5],[314.5,217.5],[314.5,217.5],[313.5,218.5],[313.5,218.5],[313.5,219.5],[313.5,220.5],[313.5,221.5],[313.5,222.5],[313.5,223.5],[313.5,223.5],[314.5,224.5],[314.5,225.5],[314.5,226.5],[314.5,226.5],[315.5,227.5],[315.5,228.5],[315.5,228.5],[316.5,229.5],[316.5,230.5],[316.5,230.5],[317.5,231.5],[317.5,232.5],[317.5,232.5],[318.5,233.5],[318.5,233.5],[319.5,234.5],[319.5,234.5],[320.5,235.5],[320.5,236.5],[320.5,236.5],[321.5,237.5],[321.5,237.5],[322.5,238.5],[322.5,238.5],[323.5,238.5],[324.5,239.5],[324.5,239.5],[325.5,240.5],[325.5,240.5],[326.5,240.5],[327.5,241.5],[327.5,241.5],[328.5,241.5],[329.5,241.5],[330.5,242.5],[330.5,242.5],[331.5,242.5],[332.5,243.5],[332.5,243.5],[333.5,243.5],[334.5,244.5],[334.5,244.5],[335.5,244.5],[336.5,244.5],[337.5,245.5],[337.5,245.5],[338.5,245.5],[339.5,245.5],[340.5,246.5],[340.5,246.5],[341.5,246.5],[341.5,246.5]]],[[[264.5,271.5],[265.5,270.5],[266.5,270.5],[266.5,270.5],[266.5,269.5],[267.5,268.5],[267.5,268.5],[268.5,267.5],[268.5,267.5],[268.5,266.5],[269.5,265.5],[269.5,265.5],[270.5,264.5],[270.5,264.5],[270.5,263.5],[271.5,262.5],[271.5,262.5],[272.5,261.5],[272.5,261.5],[272.5,260.5],[273.5,259.5],[273.5,259.5],[273.5,258.5],[274.5,257.5],[274.5,257.5],[274.5,256.5],[274.5,255.5],[274.5,254.5],[274.5,253.5],[274.5,252.5],[274.5,251.5],[274.5,250.5],[274.5,250.5],[273.5,249.5],[273.5,249.5],[272.5,248.5],[272.5,248.5],[271.5,247.5],[271.5,247.5],[270.5,246.5],[270.5,246.5],[269.5,246.5],[268.5,245.5],[268.5,245.5],[267.5,244.5],[267.5,244.5],[266.5,243.5],[266.5,243.5],[265.5,243.5],[264.5,242.5],[264.5,242.5],[263.5,241.5],[263.5,241.5],[262.5,241.5],[261.5,241.5],[260.5,241.5],[259.5,241.5],[258.5,241.5],[257.5,241.5],[257.5,241.5],[256.5,242.5],[255.5,242.5],[254.5,242.5],[254.5,242.5],[253.5,243.5],[252.5,243.5],[251.5,243.5],[251.5,243.5],[250.5,244.5],[249.5,244.5],[249.5,244.5],[248.5,245.5],[247.5,245.5],[247.5,245.5],[246.5,246.5],[246.5,246.5],[246.5,247.5],[245.5,248.5],[245.5,248.5],[245.5,249.5],[244.5,250.5],[244.5,250.5],[244.5,251.5],[244.5,252.5],[244.5,253.5],[244.5,254.5],[244.5,255.5],[244.5,256.5],[244.5,257.5],[244.5,258.5],[244.5,259.5],[244.5,260.5],[244.5,261.5],[244.5,262.5],[244.5,262.5],[245.5,263.5],[245.5,264.5],[245.5,264.5],[246.5,265.5],[246.5,265.5],[247.5,266.5],[247.5,266.5],[248.5,267.5],[248.5,267.5],[249.5,267.5],[250.5,268.5],[250.5,268.5],[251.5,268.5],[252.5,268.5],[253.5,268.5],[254.5,268.5],[255.5,268.5],[256.5,268.5],[257.5,269.5],[257.5,269.5],[258.5,269.5],[259.5,270.5],[259.5,270.5],[260.5,270.5],[261.5,271.5],[261.5,271.5],[262.5,271.5],[263.5,271.5],[264.5,271.5],[264.5,271.5]]],[[[155.5,294.5],[155.5,293.5],[155.5,292.5],[155.5,291.5],[155.5,291.5],[154.5,290.5],[154.5,290.5],[153.5,289.5],[153.5,289.5],[152.5,288.5],[152.5,287.5],[152.5,287.5],[151.5,286.5],[151.5,285.5],[151.5,285.5],[150.5,284.5],[150.5,283.5],[150.5,282.5],[150.5,281.5],[150.5,280.5],[151.5,279.5],[151.5,279.5],[151.5,278.5],[151.5,277.5],[151.5,276.5],[152.5,275.5],[152.5,275.5],[153.5,274.5],[154.5,274.5],[155.5,274.5],[156.5,274.5],[157.5,274.5],[158.5,275.5],[158.5,275.5],[159.5,276.5],[159.5,276.5],[160.5,277.5],[160.5,277.5],[161.5,278.5],[161.5,278.5],[162.5,278.5],[163.5,279.5],[163.5,279.5],[164.5,280.5],[164.5,280.5],[165.5,281.5],[165.5,281.5],[166.5,281.5],[167.5,282.5],[167.5,282.5],[168.5,283.5],[168.5,283.5],[169.5,284.5],[169.5,284.5],[170.5,285.5],[170.5,285.5],[171.5,285.5],[172.5,285.5],[173.5,285.5],[174.5,285.5],[175.5,285.5],[176.5,285.5],[177.5,285.5],[178.5,285.5],[179.5,285.5],[180.5,285.5],[181.5,285.5],[182.5,285.5],[183.5,285.5],[183.5,285.5],[184.5,284.5],[185.5,284.5],[185.5,284.5],[186.5,283.5],[187.5,283.5],[188.5,283.5],[188.5,283.5],[189.5,282.5],[190.5,282.5],[191.5,282.5],[192.5,282.5],[192.5,282.5],[193.5,281.5],[194.5,281.5],[195.5,281.5],[195.5,281.5],[195.5,280.5],[195.5,279.5],[195.5,278.5],[195.5,277.5],[195.5,276.5],[195.5,275.5],[195.5,274.5],[195.5,273.5],[195.5,272.5],[195.5,271.5],[195.5,270.5],[195.5,269.5],[195.5,269.5],[194.5,268.5],[194.5,267.5],[194.5,266.5],[194.5,266.5],[193.5,265.5],[193.5,264.5],[193.5,264.5],[192.5,263.5],[192.5,263.5],[191.5,262.5],[191.5,262.5],[190.5,261.5],[190.5,261.5],[189.5,261.5],[188.5,261.5],[187.5,261.5],[186.5,261.5],[185.5,261.5],[184.5,261.5],[183.5,261.5],[182.5,261.5],[181.5,261.5],[181.5,261.5],[180.5,262.5],[179.5,262.5],[178.5,262.5],[177.5,262.5],[176.5,262.5],[175.5,262.5],[174.5,262.5],[173.5,262.5],[172.5,262.5],[171.5,262.5],[170.5,262.5],[169.5,262.5],[168.5,262.5],[167.5,262.5],[166.5,262.5],[165.5,262.5],[164.5,262.5],[163.5,262.5],[162.5,262.5],[161.5,262.5],[160.5,262.5],[159.5,262.5],[158.5,262.5],[157.5,262.5],[156.5,262.5],[155.5,261.5],[155.5,261.5],[154.5,261.5],[153.5,260.5],[153.5,260.5],[152.5,260.5],[151.5,259.5],[151.5,259.5],[150.5,258.5],[150.5,258.5],[149.5,258.5],[148.5,257.5],[148.5,257.5],[147.5,256.5],[147.5,256.5],[146.5,255.5],[146.5,255.5],[145.5,255.5],[144.5,254.5],[144.5,254.5],[143.5,253.5],[143.5,253.5],[142.5,252.5],[142.5,252.5],[141.5,252.5],[140.5,251.5],[140.5,251.5],[139.5,251.5],[138.5,251.5],[137.5,251.5],[136.5,251.5],[135.5,251.5],[135.5,251.5],[134.5,252.5],[133.5,252.5],[132.5,252.5],[132.5,252.5],[131.5,253.5],[131.5,253.5],[130.5,254.5],[130.5,254.5],[129.5,255.5],[129.5,255.5],[128.5,256.5],[128.5,256.5],[128.5,257.5],[127.5,258.5],[127.5,258.5],[127.5,259.5],[126.5,260.5],[126.5,260.5],[126.5,261.5],[126.5,262.5],[126.5,263.5],[126.5,264.5],[126.5,265.5],[126.5,265.5],[127.5,266.5],[127.5,267.5],[127.5,268.5],[127.5,269.5],[127.5,270.5],[127.5,271.5],[127.5,271.5],[128.5,272.5],[128.5,273.5],[128.5,274.5],[128.5,274.5],[129.5,275.5],[129.5,276.5],[129.5,277.5],[129.5,277.5],[130.5,278.5],[130.5,279.5],[130.5,279.5],[131.5,280.5],[131.5,280.5],[132.5,281.5],[132.5,282.5],[132.5,282.5],[133.5,283.5],[133.5,283.5],[134.5,284.5],[134.5,285.5],[134.5,285.5],[135.5,286.5],[135.5,286.5],[136.5,287.5],[136.5,287.5],[137.5,288.5],[137.5,288.5],[138.5,289.5],[138.5,289.5],[139.5,290.5],[139.5,290.5],[140.5,290.5],[141.5,291.5],[141.5,291.5],[142.5,291.5],[143.5,292.5],[143.5,292.5],[144.5,292.5],[145.5,292.5],[146.5,292.5],[147.5,292.5],[148.5,293.5],[148.5,293.5],[149.5,293.5],[150.5,293.5],[151.5,293.5],[152.5,293.5],[153.5,293.5],[154.5,294.5],[154.5,294.5],[155.5,294.5],[155.5,294.5]]],[[[335.5,312.5],[335.5,311.5],[336.5,310.5],[336.5,310.5],[336.5,309.5],[336.5,308.5],[337.5,307.5],[337.5,307.5],[337.5,306.5],[338.5,305.5],[338.5,305.5],[338.5,304.5],[338.5,303.5],[339.5,302.5],[339.5,302.5],[339.5,301.5],[340.5,300.5],[340.5,300.5],[341.5,299.5],[342.5,300.5],[342.5,300.5],[343.5,301.5],[343.5,301.5],[344.5,302.5],[344.5,302.5],[345.5,303.5],[345.5,303.5],[346.5,304.5],[346.5,304.5],[347.5,305.5],[347.5,305.5],[348.5,306.5],[348.5,306.5],[349.5,307.5],[349.5,307.5],[350.5,308.5],[350.5,308.5],[351.5,308.5],[352.5,308.5],[353.5,308.5],[354.5,308.5],[355.5,308.5],[356.5,308.5],[357.5,308.5],[358.5,308.5],[358.5,308.5],[359.5,307.5],[360.5,307.5],[360.5,307.5],[361.5,306.5],[361.5,306.5],[362.5,305.5],[362.5,305.5],[363.5,304.5],[363.5,304.5],[363.5,303.5],[364.5,302.5],[364.5,302.5],[364.5,301.5],[364.5,300.5],[365.5,299.5],[365.5,299.5],[365.5,298.5],[365.5,297.5],[366.5,296.5],[366.5,296.5],[366.5,295.5],[366.5,294.5],[366.5,293.5],[366.5,293.5],[365.5,292.5],[365.5,291.5],[365.5,291.5],[364.5,290.5],[364.5,290.5],[363.5,290.5],[362.5,290.5],[361.5,290.5],[360.5,290.5],[359.5,290.5],[358.5,290.5],[357.5,290.5],[356.5,290.5],[355.5,290.5],[354.5,290.5],[353.5,290.5],[352.5,290.5],[351.5,290.5],[350.5,289.5],[350.5,289.5],[349.5,289.5],[348.5,288.5],[348.5,288.5],[347.5,287.5],[347.5,287.5],[346.5,286.5],[346.5,285.5],[346.5,285.5],[345.5,284.5],[346.5,283.5],[346.5,283.5],[346.5,282.5],[347.5,281.5],[348.5,281.5],[349.5,281.5],[349.5,281.5],[350.5,280.5],[351.5,280.5],[352.5,280.5],[352.5,280.5],[353.5,279.5],[354.5,279.5],[355.5,279.5],[355.5,279.5],[356.5,278.5],[357.5,278.5],[358.5,278.5],[358.5,278.5],[358.5,277.5],[358.5,276.5],[358.5,275.5],[358.5,275.5],[357.5,274.5],[357.5,273.5],[357.5,272.5],[357.5,272.5],[356.5,271.5],[356.5,271.5],[355.5,270.5],[355.5,270.5],[354.5,270.5],[353.5,270.5],[352.5,269.5],[352.5,269.5],[351.5,269.5],[350.5,268.5],[350.5,268.5],[349.5,268.5],[348.5,268.5],[347.5,268.5],[346.5,268.5],[346.5,268.5],[345.5,269.5],[344.5,269.5],[343.5,269.5],[343.5,269.5],[342.5,270.5],[342.5,270.5],[342.5,271.5],[341.5,272.5],[341.5,272.5],[341.5,273.5],[340.5,274.5],[340.5,274.5],[340.5,275.5],[340.5,276.5],[339.5,277.5],[339.5,277.5],[339.5,278.5],[339.5,279.5],[339.5,280.5],[339.5,281.5],[339.5,282.5],[339.5,283.5],[339.5,284.5],[339.5,285.5],[339.5,286.5],[339.5,287.5],[339.5,287.5],[340.5,288.5],[340.5,289.5],[340.5,290.5],[340.5,290.5],[341.5,291.5],[341.5,292.5],[341.5,292.5],[342.5,293.5],[342.5,294.5],[342.5,295.5],[342.5,296.5],[342.5,297.5],[341.5,298.5],[340.5,298.5],[339.5,297.5],[339.5,297.5],[338.5,296.5],[338.5,296.5],[337.5,295.5],[337.5,295.5],[336.5,294.5],[336.5,294.5],[335.5,293.5],[335.5,293.5],[334.5,292.5],[334.5,292.5],[333.5,292.5],[332.5,292.5],[331.5,291.5],[331.5,291.5],[330.5,291.5],[329.5,291.5],[328.5,291.5],[328.5,291.5],[327.5,292.5],[327.5,292.5],[326.5,293.5],[326.5,293.5],[326.5,294.5],[326.5,295.5],[326.5,296.5],[326.5,297.5],[326.5,298.5],[325.5,299.5],[325.5,299.5],[325.5,300.5],[325.5,301.5],[324.5,302.5],[324.5,302.5],[324.5,303.5],[324.5,304.5],[324.5,305.5],[324.5,305.5],[325.5,306.5],[325.5,307.5],[325.5,307.5],[326.5,308.5],[326.5,309.5],[326.5,309.5],[327.5,310.5],[327.5,310.5],[328.5,310.5],[329.5,310.5],[330.5,311.5],[330.5,311.5],[331.5,311.5],[332.5,312.5],[332.5,312.5],[333.5,312.5],[334.5,312.5],[335.5,312.5],[335.5,312.5]]]]'''

if __name__=="__main__":
   main()
